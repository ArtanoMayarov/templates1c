{1,
{4,
{"АУФ",1,0,"",""},
{3,
{"Кодогенератор для API",1,0,"",""},
{0,
{"Движения.Списание.МодульДокумента",0,0,"[Движения]Документ","// Формирование движений по регистру <?""ИмяРН"", РегистрНакопления>
// Пример использования:
// Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Движения_<?""ИмяРН"", РегистрНакопления>(ЭтотОбъект, РежимПроведения, Отказ);
// КонецПроцедуры
//
// Параметры
//  
//  пДокОбъект  - Документ.Объект - Документ по которому формируются движения
//  пРежимПроведения  - РежимПроведенияДокумента - стандартное перечисление (Оперативный,Неоперативный)
//  пОтказ  - Булево - Используется для фиксация факта ошибки при формировании движений
//                 Если истина, то стандартный обработчик выбросит исключение и не проведёт документ
//
Процедура Движения_<?""ИмяРН"", РегистрНакопления>(пДокОбъект, пРежимПроведения, пОтказ)
	
	ТабСписания = пДокОбъект.<?""Имя табличной части"">.Выгрузить();
	ИмяРег = Метаданные.РегистрыНакопления.<?""ИмяРН"", РегистрНакопления>.Имя;
	ЗаполнитьДвижения = Истина;
	
	ДвижениеПоРегистрам.СписаниеОстатковРН(пДокОбъект, ИмяРег, ТабСписания, пРежимПроведения, ЗаполнитьДвижения, пОтказ);
	
КонецПроцедуры


"}
},
{0,
{"Движения.Списание.МодульДокумента.ПримерИспользования",0,0,"[Движения]Документ","Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения_<?""ИмяРН"", РегистрНакопления>(ЭтотОбъект, РежимПроведения, Отказ);
	
КонецПроцедуры


// Формирование движений по регистру <?""ИмяРН"", РегистрНакопления>
// Пример использования:
// Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Движения_<?""ИмяРН"", РегистрНакопления>(ЭтотОбъект, РежимПроведения, Отказ);
// КонецПроцедуры
//
// Параметры
//  
//  пДокОбъект  - Документ.Объект - Документ по которому формируются движения
//  пРежимПроведения  - РежимПроведенияДокумента - стандартное перечисление (Оперативный,Неоперативный)
//  пОтказ  - Булево - Используется для фиксация факта ошибки при формировании движений
//                 Если истина, то стандартный обработчик выбросит исключение и не проведёт документ
//
Процедура Движения_<?""ИмяРН"", РегистрНакопления>(пДокОбъект, пРежимПроведения, пОтказ)
	
	ТабСписания = пДокОбъект.<?""Имя табличной части"">.Выгрузить();
	ИмяРег = Метаданные.РегистрыНакопления.<?""ИмяРН"", РегистрНакопления>.Имя;
	ЗаполнитьДвижения = Истина;
	
	ДвижениеПоРегистрам.СписаниеОстатковРН(пДокОбъект, ИмяРег, ТабСписания, пРежимПроведения, ЗаполнитьДвижения, пОтказ);
	
КонецПроцедуры


"}
},
{0,
{"Движения.МодульМенеджераРегистра.API",0,0,"[Движения]РегистрНакопления","#Область АУФ_ВнешнийИнтерфейс

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////// АУФ.ВНЕШНИЙ ИНТЕРФЕЙС /////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///// Код в этом разделе не рекомендуется модифицировать
///////////////////////////////////////////////////////////////////////////////////////////////


// Получение таблицы остатков на переданную дату
// Имена ресурсов соответствуют имени заданному в конфигураторе
//
// Параметры
//  
//  пДата  - Дата,МоментВремени,Граница - Дата на которую запрашиваются остатки
//  пОтбор			- Структура,Соответствие - Ключ имя реквизита, значение - значение отбора.
//                 Если не задан, то отбираются все элементы
//  пУсловияОтбора  - Структура - Ключ - имя реквизита, значение - способ сравнения (тип - ВидСравнения). 
//                 Если не задан, то все условия отбираются по виду сравнения ""Равно""
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Остатки по регистру
//
Функция ОстаткиНаДату(пДата, пОтбор = Неопределено, пУсловияОтбора = Неопределено, пИменаПолей = Неопределено) Экспорт
	
	ТабОстатки = ТаблицаОстатковПереопределяемый(пДата, пОтбор, пУсловияОтбора);
	
	Возврат ТабОстатки;
	
КонецФункции

// Получение таблицы остатков на текущий момент
// Имена ресурсов соответствуют имени заданному в конфигураторе
//
// Параметры
//  
//  пОтбор			- Структура,Соответствие - Ключ имя реквизита, значение - значение отбора.
//                 Если не задан, то отбираются все элементы
//  пУсловияОтбора  - Структура - Ключ - имя реквизита, значение - способ сравнения (тип - ВидСравнения). 
//                 Если не задан, то все условия отбираются по виду сравнения ""Равно""
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Остатки по регистру
//
Функция ОстаткиТекущие(пОтбор = Неопределено, пУсловияОтбора = Неопределено, пИменаПолей = Неопределено) Экспорт
	
	ТабОстатки = ТаблицаОстатковПереопределяемый(Неопределено, пОтбор, пУсловияОтбора);
	
	Возврат ТабОстатки;
	
КонецФункции

// Формирование АУФ-совместимого отбора по переданной таблице
// Для каждого регистра состав полей настраивается индивидуально
//
// Параметры
//  
//  пДанныеШапки  - Произвольный - Реквизиты шапки документа или иной источник для отбора по измерениям
//  пТаблица  - ТаблицаЗначений - Таблица служащая источником значений для формирования фильтра
//  пДопРеквизиты  - Строка,Массив,Структура,Соответствие - Дополнительные данные отбора не являющиеся измерениями регистра
//                 Для коллекций типа Структура и Соответствие предполагается хранение имени реквизита в ключе
//                 
// Возвращаемое значение:
//   Структура   - Структура(Отбор,УсловияОтбора)
//
Функция ФильтрПоИзмерениям(пДанныеШапки = Неопределено, пТаблица = Неопределено, пДопРеквизиты = Неопределено) Экспорт
	
	Результат = ФильтрПоИзмерениямПереопределяемый(пДанныеШапки, пТаблица, пДопРеквизиты);
	
	Возврат Результат;

КонецФункции

// Формирование таблицы движений для списания
//
// Параметры
//  
//  пТабСписания  - ТаблицаЗначений - таблица содержащая записи которые необходимо списать (потребности)
//                 Структура таблицы должна соответствовать структуре регистра
//                 и структуре таблицы остатков минимально как подмножество
//  ТабОстатков  - ТаблицаЗначений - таблица остатков по регистру
//                 Структура таблицы должна соответствовать и структуре регистра как минимум как подмножество
//                 и структуре таблицы списания как надмножество
//  пОтказ  - Булево - Изменяемый параметр. Если истина, то движения сформировать не удалось
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Результат подбора остатков - таблица движений с набором колонок из таблицы остатков.
//
Функция ДвиженияСписание(пТабСписания, пТабОстатков, пОтказ) Экспорт
	
	ТабДвижений = ДвиженияСписаниеПереопределяемый(пОтказ, пТабОстатков, пТабСписания);
	
	Возврат ТабДвижений;
	
КонецФункции

// Формирование таблицы движений для списания
//
// Параметры
//  
//  пТабПоступления  - ТаблицаЗначений - таблица содержащая записи которые необходимо оприходовать
//                 Структура таблицы должна соответствовать структуре регистра
//  ТабОстатков  - ТаблицаЗначений - таблица остатков по регистру
//                 Структура таблицы должна соответствовать и структуре регистра как минимум как подмножество
//                 и структуре таблицы списания как надмножество
//  пОтказ  - Булево - Изменяемый параметр. Если истина, то движения сформировать не удалось
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица движений поступления.
//
Функция ДвиженияПоступление(пТабПоступления, пОтказ) Экспорт
	
	Возврат ДвиженияПоступлениеПереопределяемый(пТабПоступления, пОтказ);
	
КонецФункции

// Подбор остатков по таблице остатков и таблице потребностей
//  
// Параметры
//  
//  пТаблицаСписания  - ТаблицаЗначений - содержит информацию о потребных к списанию остатках.
//                 По-умолчанию, в таблицу списания добавляются служебные поля [ИмяРесурса]НеПодобрано (число) и ""ПотребностьЗакрыта"" (булево)
//  пТаблицаОстатков  - ТаблицаЗначений - остатки, которые предполагается списывать.
//                 Структура таблицы будет использована для создания таблицы движений
//                 Таблица остатков ""портится"" - её ресурсы уменьшаются на сумму подобранных
//  пПоляПоиска  - Строка,Массив,Структура,Соответствие - список имен полей, по набору которых будет производиться поиск доступной партии
//                 Набор имен полей должен соответствовать набору полей в таблицах списания и остатков
//                 Для коллекций типа Структура и Соответствие предполагается хранение имени реквизита в ключе
//  пОстановкаПриОшибке  - Булево - Если истина, то при первой же ошибке подбор будет остановлен иначе, при нехватке остатка подбор не прекратится 
//  пОтказ  - Булево - Изменяемый параметр. Если истина, то остатки подобраны не полностью
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Результат подбора остатков - таблица движений с набором колонок из таблицы остатков.
//
Функция ПодобратьОстатки(пТабСписания, пТабОстатков, пПоляПоиска, пОстановкаПриОшибке = Ложь, пОтказ = Ложь) Экспорт
	
	ТабДвижений = ПодборОстатковПереопределяемый(пТабСписания, пТабОстатков, пПоляПоиска, пОстановкаПриОшибке, пОтказ);
	
	Возврат ТабДвижений;
	
КонецФункции

#КонецОбласти


#Область АУФ_ПереопределяемыйИнтерфейс
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////// АУФ.ПЕРЕОПРЕДЕЛЯЕМЫЙ ИНТЕРФЕЙС /////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///// Код в этом разделе может быть быть переопределен, но т.к. он является частью API
///// то форматы входных и выходных данных не должны меняться
///////////////////////////////////////////////////////////////////////////////////////////////


Функция ФильтрПоИзмерениямПереопределяемый(пДанныеШапки, пТаблица, пДопРеквизиты)
	
	Перем Фильтр;
	АУФ = УниверсальныеФункции;
	
	Фильтр = АУФ.ФильтрПоРеквизитамОбъектаБД(Метаданные(), пДанныеШапки, ""Измерения"", Фильтр);
	Фильтр = АУФ.ФильтрПоРеквизитамОбъектаБД(Метаданные(), пТаблица, ""Измерения"", Фильтр);
	
	Фильтр = АУФ.ФильтрПоРеквизитамОбъекта(пДопРеквизиты, пДанныеШапки, Фильтр);
	Фильтр = АУФ.ФильтрПоРеквизитамОбъекта(пДопРеквизиты, пТаблица, Фильтр);
	
	Возврат Фильтр;

КонецФункции

Функция ДвиженияСписаниеПереопределяемый(пОтказ, пТабОстатков, пТабСписания)
	
	ПоляПоиска = ПоляПоискаОстатковПереопределяемый(); 
	
	ТабДвижений = ПодборОстатковПереопределяемый(пТабСписания, пТабОстатков, ПоляПоиска, , пОтказ);
	
	Возврат ТабДвижений;

КонецФункции

Функция ДвиженияПоступлениеПереопределяемый(пТабПоступления, пОтказ)
	
	Возврат пТабПоступления;

КонецФункции

Функция ПодборОстатковПереопределяемый(пТабСписания, пТабОстатков, пПоляПоиска, пОстановкаПриОшибке = Ложь, пОтказ = Ложь)
	
	МастерПодбора = МастерскаяАПИ.МастерПодбораРесурсов(Метаданные(), , пОстановкаПриОшибке);
	МастерПодбора.ДобавитьРесурс_СписаниеПрямое(""Количество"");
	МастерПодбора.ДобавитьРесурс_СписаниеПропорциональноПоСтроке(""Сумма"");
	МастерПодбора.ИспользоватьИсключения(); 
	МастерПодбора.ИспользоватьСообщения(Ложь);
	
	ТабДвижений = МастерПодбора.ПодобратьОстатки(пТабСписания, пТабОстатков, пПоляПоиска, пОтказ);
	
	Возврат ТабДвижений;

КонецФункции

Функция ПоляПоискаОстатковПереопределяемый()
	
	//Как правило, это одно или несколько измерений регистра по которым производится собственно подбор
	ПоляПоиска = ""<?""Поля поиска при подборе остатков (через запятую)"">""; //ИзШаблона ""Поля поиска при подборе остатков (через запятую)""
	
	Возврат ПоляПоиска;

КонецФункции

// Получение простой таблицы остатков
// Имена ресурсов соответствуют имени заданному в конфигураторе
//
// Параметры
//  
//  пДата  - Дата,МоментВремени,Граница - Дата на которую запрашиваются остатки
//                 Если не задано, то остатки формируются на последние рассчитанные итоги
//  пОтбор			- Структура,Соответствие - Ключ имя реквизита, значение - значение отбора.
//                 Если не задан, то отбираются все элементы
//  пУсловияОтбора  - Структура - Ключ - имя реквизита, значение - способ сравнения (тип - ВидСравнения). 
//                 Если не задан, то все условия отбираются по виду сравнения ""Равно""
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Остатки по регистру
//
Функция ТаблицаОстатковПереопределяемый(пДата, пОтбор, пУсловияОтбора, пИменаПолей)
	
	МетаРег = Метаданные();
	
	ЗапросОстатков = ЗапросОстатковПоРегиструПереопределяемый(пДата, пОтбор, пУсловияОтбора, пИменаПолей);
	ТабОстатки = ЗапросОстатков.Выгрузить();
	
	// Если запрос свой, а не универсальный, то эту функцию можно не вызывать
	АУФ = УниверсальныеФункции;
	АУФ.УбратьТипАгрегатаИзИмениРесурсов(ТабОстатки, ""Остаток"", МетаРег);
	
	Возврат ТабОстатки;

КонецФункции

Функция ЗапросОстатковПоРегиструПереопределяемый(пДатаОстатков, пОтбор, пУсловияОтбора, пИменаПолей)
	
	АУФ = УниверсальныеФункции;
	МетаРег = Метаданные();
	
	РезультатЗапроса = АУФ.ОстаткиРН(МетаРег.Имя, пДатаОстатков, пОтбор, пУсловияОтбора, пИменаПолей);
	
	Если Ложь Тогда //Пример переопределения функции	
		ТекстЗапроса = ТекстЗапросаОстатковПереопределяемый();
		Если пДатаОстатков = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ""&ДатаОстатков"", """");
		КонецЕсли;
		// Отказ от универсального запроса остатков подразумевает создание сложного запроса
		// Поэтому автозаполнение отключается
		// При разработке запроса не забываем настраивать опции построителя: поля и условия, в т.ч. условия виртуальных таблиц
		Автозаполнение = Ложь; 
		Запрос = АУФ.НовыйЗапрос(ТекстЗапроса, пОтбор, пУсловияОтбора, Автозаполнение);
		МВТ = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр(""ДатаОстатков"", пДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = МВТ;
		
		РезультатЗапроса = Запрос.Выполнить();
		МВТ.Закрыть();
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстатковПереопределяемый()
	
	// При разработке запроса не забываем настраивать параметры построителя:
	// поля и условия, в т.ч. условия виртуальных таблиц
	// Для даты остатков используйте параметр &ДатаОстатков	
	
	
КонецФункции

// Реализация недостающего метода контекста, аналогичного контексту объекта или ссылки
//
// Параметры
//  нет передаваемых параметров
//
Функция Метаданные()
	
	Возврат Метаданные.РегистрыНакопления.<?""Выберите регистр"", РегистрНакопления>; //ИзШаблона ""Выберите регистр""
	
КонецФункции

#КонецОбласти"}
}
},
{6,
{"Конструкторы",1,0,"",""},
{0,
{"Новый документ с заполнением",0,0,"Новый[Документ]","<?""Имя новой переменной""> = Объекты_ауф.НовыйДокумент(Документы.<?"""", Документ>, <?""Имя переменной данных заполнения"">, <?"""", ВыборВарианта, ""Не копирование"", ""Ложь"", ""Это копирование"", ""Истина"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.ДокументОбъект_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>

"}
},
{0,
{"Новый справочник с заполнением",0,0,"Новый[Справочник]","<?""Имя новой переменной""> = Объекты_ауф.НовыйСправочник(Справочники.<?"""", Справочник>, <?""Имя переменной данных заполнения"">, <?""Это группа?"", ВыборВарианта, ""Элемент"", ""Ложь"", ""Группа"", ""Истина"">, <?"""", ВыборВарианта, ""Не копирование"", ""Ложь"", ""Это копирование"", ""Истина"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.СправочникОбъект_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"Документ-объект по ссылке",0,0,"Получить[ДокОбъект]","<?""Имя новой переменной""> = Объекты_ауф.ДокументОбъект(<?""Имя переменной со ссылкой"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.ДокументОбъект_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"Справочник-объект по ссылке",0,0,"Получить[СпрОбъект]","<?""Имя новой переменной""> = Объекты_ауф.ДокументОбъект(<?""Имя переменной со ссылкой"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.ДокументОбъект_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"Новый фильтр",0,0,"Новый[Фильтр]","<?""Имя новой переменной""> = МастерскаяАПИ.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
},
{0,
{"МастерПодбораРесурсов",0,0,"Мастер[ПР]","<?""Имя новой переменной""> = МастерскаяАПИ.МастерПодбораРесурсов(Неопределено, <?""Поведение при нехватке остатков"", ВыборВарианта, ""Выдать исключение"", ""Истина"", ""Продолжить выполнение"", ""Ложь"">, <?""Поведение при нехватке остатка по текущей позиции"", ВыборВарианта, ""Продолжить подбор"", ""Ложь"", ""Остановить подбор"", ""Истина"">);
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	<?""Имя новой переменной""> = Обработки.УниверсальныйПодборРесурсов_ауф.Создать();
	
#КонецЕсли
#КонецОбласти
<?>"}
}
},
{2,
{"Комментирование участков модуля",1,0,"",""},
{0,
{"Получение контекста",0,0,"Конт[екст]","#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	<?>
#КонецЕсли
#КонецОбласти"}
},
{0,
{"Общий модуль",0,0,"туду","// COMMON. <?"""", ДатаВремя, ""ДЛФ=Д""> <?""ИмяПользователяСокр"", ИмяПользователя> Возможно, стоит вынести в общий модуль."}
}
},
{1,
{"ПовторноеИспользование",1,0,"",""},
{10,
{"Запросы",1,0,"",""},
{0,
{"Найти документ",0,0,"Найти[Документ]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Дата"", "">="", НачалоДня(ТекущаяДата()));
//МастерФильтров.Добавить(""Проведен"", ""Равно"", Истина);

МетаОбъект = Метаданные.Документы.<?""Выберите тип объекта"", Документ>;
Фильтр = МастерФильтров.ПолучитьАУФ();

<?""Имя переменной результата""> = Объекты_ауф.ДокументНайти(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора);"}
},
{0,
{"Найти справочник",0,0,"Найти[Справочник]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Ссылка"", ""ВСписке"", СписокСсылок);
//МастерФильтров.Добавить(""ПометкаУдаления"", ""="", Ложь);

МетаОбъект = Метаданные.Справочники.<?""Выберите тип объекта"", Справочник>;
Фильтр = МастерФильтров.ПолучитьАУФ();

<?""Имя переменной результата""> = Объекты_ауф.СправочникНайти(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора);"}
},
{0,
{"Найти ПВХ",0,0,"Найти[ПВХ]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Ссылка"", ""ВСписке"", СписокСсылок);
//МастерФильтров.Добавить(""ПометкаУдаления"", ""="", Ложь);

МетаОбъект = Метаданные.ПланыВидовХарактеристик.<?""Выберите тип объекта"", ПланВидовХарактеристик>;
Фильтр = МастерФильтров.ПолучитьАУФ();

<?""Имя переменной результата""> = Объекты_ауф.ПВХНайти(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора);"}
},
{0,
{"Запрос документов",0,0,"Запрос[Документов]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Дата"", "">="", НачалоДня(ТекущаяДата()));
//МастерФильтров.Добавить(""Проведен"", ""Равно"", Истина);

МетаОбъект = Метаданные.Документы.<?""Выберите тип объекта"", Документ>;
Фильтр = МастерФильтров.ПолучитьАУФ();
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Дата,Ссылка""; 

РезультатЗапроса = Объекты_ауф.ДокументЗапросДанных(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
},
{0,
{"Запрос справочников",0,0,"Запрос[Справочников]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Ссылка"", ""ВСписке"", СписокСсылок);
//МастерФильтров.Добавить(""ПометкаУдаления"", ""="", Ложь);

МетаОбъект = Метаданные.Справочники.<?""Выберите тип объекта"", Справочник>;
Фильтр = МастерФильтров.ПолучитьАУФ();
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Код,Наименование,ПометкаУдаления""; 

РезультатЗапроса = Объекты_ауф.СправочникЗапросДанных(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
},
{0,
{"Запрос ПВХ",0,0,"Запрос[ПВХ]","МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Ссылка"", ""ВСписке"", СписокСсылок);
//МастерФильтров.Добавить(""ПометкаУдаления"", ""="", Ложь);

МетаОбъект = Метаданные.ПланыВидовХарактеристик.<?""Выберите тип объекта"", ПланВидовХарактеристик>;
Фильтр = МастерФильтров.ПолучитьАУФ();
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Код,Наименование,ПометкаУдаления""; 

РезультатЗапроса = Объекты_ауф.ПВХЗапросДанных(МетаОбъект, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
},
{0,
{"Произвольный запрос",0,0,"Запрос[Произвольный]","АУФ = УниверсальныеФункции_ауф;
МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Дата"", "">="", НачалоДня(ТекущаяДата()));
//МастерФильтров.Добавить(""Проведен"", ""Равно"", Истина);

Фильтр = МастерФильтров.ПолучитьАУФ();
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Дата,Ссылка""; 
ТекстЗапроса = ТекстЗапроса<?""Имя запроса"">();

РезультатЗапроса = АУФ.НовыйЗапрос(ТекстЗапроса, Фильтр.Отбор, Фильтр.УсловияОтбора, Истина, ПоляВыборки);

Функция ТекстЗапроса<?""Имя запроса"">()
	
	// При разработке запроса не забываем настраивать параметры построителя:
	// таблицы, поля и условия, в т.ч. условия виртуальных таблиц
	// Для даты остатков используйте параметр &ДатаОстатков
	
	Возврат
	""""
	;
	
КонецФункции"}
},
{0,
{"Остатки регистра накопления",0,0,"Остатки[РН]","АУФ = УниверсальныеФункции_ауф;
МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.УниверсальныйФильтр_ауф.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
ДатаОстатков = Неопределено; //Если не задано, то будут взяты последние остатки
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Номенклатура"", ""ВСписке"", СписокЗначений); //Пример фильтра
Фильтр = МастерФильтров.ПолучитьАУФ();
МетаРег = Метаданные.РегистрыНакопления.<?""Регистр остатков"", РегистрНакопления>;
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Склад,Номенклатура""; 

РезультатЗапроса = АУФ.ОстаткиРН(МетаРег, ДатаОстатков, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
},
{0,
{"Срез регистра сведений",0,0,"Срез[РС]","АУФ = УниверсальныеФункции_ауф;
МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.АПИ_ДокументОбъект.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
ДатаСреза = Неопределено; //Если не задано, то будут взяты последние остатки
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Номенклатура"", ""ВСписке"", СписокЗначений); //Пример фильтра
Фильтр = МастерФильтров.ПолучитьАУФ();
МетаРег = Метаданные.РегистрыСведений.<?""Выберите регистр"", РегистрСведений>;
ЭтоСрезПоследних = <?""Вид среза"", ВыборВарианта, ""Срез последних"", ""Истина"", ""Срез первых"", ""Ложь"">;
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Склад,Номенклатура""; 

РезультатЗапроса = АУФ.СрезРС(МетаРег, ДатаОстатков, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки, ЭтоСрезПоследних);"}
},
{0,
{"Обороты регистра накопления",0,0,"Обороты[РН]","АУФ = УниверсальныеФункции_ауф;
МастерФильтров = МастерскаяАПИ_ауф.КонструкторФильтров();
#Область DevOnlyПолучениеКонтекста
#Если Сервер и Не Сервер Тогда
	
	МастерФильтров = Обработки.АПИ_ДокументОбъект.Создать();
	
#КонецЕсли
#КонецОбласти

<?>
НачалоПериода = Неопределено; //Если не задано, то обороты будут взяты с самой первой записи
КонецПериода = Неопределено; //Если не задано, то будут обороты будут взяты вплоть до последней записи
//Ваши отборы могут быть здесь. Поддерживаются операторы сравнения, перечисление ВидСравнения или его наименования. 
//МастерФильтров.Добавить(""Номенклатура"", ""ВСписке"", СписокЗначений); //Пример фильтра
Фильтр = МастерФильтров.ПолучитьАУФ();
МетаРег = Метаданные.РегистрыНакопления.<?""Регистр остатков"", РегистрНакопления>;
ПоляВыборки = """"; //По умолчанию все, но можно и ограничить. Например так: ""Склад,Номенклатура""; 

РезультатЗапроса = АУФ.ОборотыРН(МетаРег, НачалоПериода, КонецПериода, Фильтр.Отбор, Фильтр.УсловияОтбора, ПоляВыборки);"}
}
}
}
}
}